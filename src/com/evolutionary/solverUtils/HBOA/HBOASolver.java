package com.evolutionary.solverUtils.HBOA;

//////////////////////////////////////////////
import com.evolutionary.operator.selection.TournamentNoReposition;
import com.evolutionary.population.SimplePopulation;
import com.evolutionary.solver.EAsolver;
import static com.evolutionary.solverUtils.HBOA.HBOA.nSuccess;
import com.evolutionary.stopCriteria.OptimumFound;

//
// This class implements the HBOA solver.
//
//////////////////////////////////////////////
public class HBOASolver extends EAsolver {

    public static int N;	 			// Population size. Default = 500.
    public static long fitCalls;				// Number of fitness calls. This is incremented by Problem.computeFitness(...).
    public static Problem problem;  			// NOTE: Use Parameter.initializeProblem() to generate an appropriate problem instance.

    public static HBOASelection selectHB;				// NOTE: Use Parameter.initializeSelector() to generate the chosen selector type.
    public static BayesianNetwork bayesianNetwork;				// NOTE: Use initializeBayesianNetwork() to initialize the chosen bayesian network generator.
    public static IReplacement replacementHB; 				// NOTE: Use Parameter.initializeReplacement() to generate the chosen replacementHB type.

    Population currentPopulation;
    int nGen = 0;

    public HBOASolver(String paramFile) {
        HBOAParameter.initializeParameters(paramFile);  		// Initialize and validate hBOA parameters
        Individual.template = new com.evolutionary.problem.bits.OneMax();
        problem = HBOAParameter.initializeProblem();	// Design Pattern Strategy
        selectHB = HBOAParameter.initializeSelection(N);
        bayesianNetwork = HBOAParameter.initializeBayesianNetwork(N);
        replacementHB = HBOAParameter.initializeReplacement();
        replacementHB = new RestrictedReplacement(30, HBOASolver.N);
        HBOAPress.initializePress();
        random.setSeed(654321);
        this.stop = new OptimumFound();
        this.selection = new TournamentNoReposition();
        this.selection.setParameters("1 4");
        this.replacement = new com.evolutionary.operator.replacement.RestrictedReplacement();

    }

    public int solve(int nRun) {
        //HBOA.random = this.getRandomGenerator();
//        HBOA.random.setSeed(654321);
        nGen = 0;																 	// Initialize number of generations.
        fitCalls = 0;																 	// Initialize number of fitness calls.		
        currentPopulation = new RandomPopulation(N);						 	// Initial random population. Responsible for computing individual fitnesses and statistics.
        parents = currentPopulation.getPopulation(new com.evolutionary.problem.bits.OneMax());
        while (!stop.isDone(this)) {
            iterate();

            System.out.println(parents.getBest());
//            SelectedSet selectedSet = selectHB.select(currentPopulation);				// 1. SELECTION.
//            bayesianNetwork.generateModel(selectedSet);		 							// 2. GENERATE BAYESIAN NETWORK.			
//            Individual[] newIndividuals = bayesianNetwork.sampleNewIndividuals();		// 3. SAMPLING.		
//            replacementHB.replace(currentPopulation, newIndividuals);				 		// 4. REPLACEMENT. Responsible for updating information about the best individual.
//
//            fitCalls += newIndividuals.length;
//            currentPopulation.computeUnivariateFrequencies();
//            currentPopulation.computeAvgFitness();
//            nGen++;
//
//            HBOAPress.printCurrentInfo(nGen, currentPopulation);
        }
        HBOAPress.printRunFinalStats(nGen, currentPopulation);

        return Stopper.foundOptimum() ? 1 : 0;
    }

    @Override
    public void iterate() {

        SimplePopulation offspring = this.selection.execute(parents);
        SelectedSet selectedSet = (SelectedSet) Population.getPopulation(offspring);
        bayesianNetwork.generateModel(selectedSet);
        //offspring = bayesianNetwork.sampleNewPopulation(parents);
        Individual[] newIndividuals = bayesianNetwork.sampleNewIndividuals();		// 3. SAMPLING.		
        replacementHB.replace(currentPopulation, newIndividuals);
        parents = currentPopulation.getPopulation(new com.evolutionary.problem.bits.OneMax());

        HBOAPress.printCurrentInfo(nGen, currentPopulation);

    }

    public static void main(String[] args) {
        HBOA.random.setSeed(654321);						 	// Fixing the seed will also fix the random generator.
        // sequence generated by Random class. This is for testing only!
        String paramFile = "HBOAParameters.txt";						 	// Check Run->RunConfigurations...-> Arguments to set the Parameter File name.  
        HBOASolver solver = new HBOASolver(paramFile); 	// Initialize the HBOA solver and Problem 'problem'.
        HBOAPress.printInitialInfo();
        for (int r = 0; r < HBOA.nRuns; r++) {		 	// Perform 'nRuns' for the same problem.
            HBOAPress.printRunInitialInfo(r);
            nSuccess += solver.solve(r);    				// Solve Problem 'problem'.
            HBOAPress.printRunFinalInfo(r);
        }
        HBOAPress.printFinalInfo();
    }
}
